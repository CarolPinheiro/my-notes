"use strict";(self.webpackChunkdev_docs=self.webpackChunkdev_docs||[]).push([[929],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>u});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),c=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),y=c(r),u=n,m=y["".concat(s,".").concat(u)]||y[u]||d[u]||i;return r?o.createElement(m,a(a({ref:t},l),{},{components:r})):o.createElement(m,a({ref:t},l))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=y;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:n,a[1]=p;for(var c=2;c<i;c++)a[c]=r[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}y.displayName="MDXCreateElement"},1559:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var o=r(7462),n=(r(7294),r(3905));r(8209);const i={},a="Utility Types",p={unversionedId:"typescript/utility-types",id:"typescript/utility-types",title:"Utility Types",description:"Anota\xe7\xf5es feitas com base na palestra",source:"@site/docs/typescript/utility-types.md",sourceDirName:"typescript",slug:"/typescript/utility-types",permalink:"/my-notes/typescript/utility-types",draft:!1,editUrl:"https://github.com/carolpinheiro/my-notes/edit/main/docs/typescript/utility-types.md",tags:[],version:"current",lastUpdatedBy:"Carol Pinheiro",lastUpdatedAt:1672838617,formattedLastUpdatedAt:"Jan 4, 2023",frontMatter:{},sidebar:"docs",previous:{title:"Singleton Pattern",permalink:"/my-notes/design-patterns/creational/singleton"}},s={},c=[{value:"Partial<code>&lt;type&gt;</code>",id:"partialtype",level:2},{value:"Required <code>&lt;type&gt;</code>",id:"required-type",level:2},{value:"Pick<code>&lt;Type, Keys&gt;</code>",id:"picktype-keys",level:2},{value:"Omit<code>&lt;Type, Keys&gt;</code>",id:"omittype-keys",level:2},{value:"Record<code>&lt;Keys,Type&gt;</code>",id:"recordkeystype",level:2}],l={toc:c};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"utility-types"},"Utility Types"),(0,n.kt)("p",null,"Anota\xe7\xf5es feitas com base na palestra\n",(0,n.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=V2D8IghrsgQ",title:"@embed"},"Typescript - Utility Types")),(0,n.kt)("h2",{id:"partialtype"},"Partial",(0,n.kt)("inlineCode",{parentName:"h2"},"<type>")),(0,n.kt)("p",null,"O tipo que voc\xea declara dentro das chaves, se torna opcional. Ent\xe3o por exemplo se tivermos uma interface User, tudo dentro dele se torna opcional (nome, e-mail, etc)."),(0,n.kt)("h2",{id:"required-type"},"Required ",(0,n.kt)("inlineCode",{parentName:"h2"},"<type>")),(0,n.kt)("p",null,"O tipo declarado dentro das chaves, ao contr\xe1rio do Partial se torna totalmente obrigat\xf3rio, mesmo se tiver itens opcionais."),(0,n.kt)("h2",{id:"picktype-keys"},"Pick",(0,n.kt)("inlineCode",{parentName:"h2"},"<Type, Keys>")),(0,n.kt)("p",null,"Voc\xea consegue construir uma interface apenas com as propriedades que voc\xea quer, referenciando o Tipo e as chaves desse tipo que voc\xea quer."),(0,n.kt)("h2",{id:"omittype-keys"},"Omit",(0,n.kt)("inlineCode",{parentName:"h2"},"<Type, Keys>")),(0,n.kt)("p",null,"Oposto do Pick, aqui voc\xea decide o que quer ocultar da interface."),(0,n.kt)("h2",{id:"recordkeystype"},"Record",(0,n.kt)("inlineCode",{parentName:"h2"},"<Keys,Type>")),(0,n.kt)("p",null,"Imaginemos que voc\xea tem uma interface onde as chaves s\xe3o n\xfameros, e todos eles seguem um formato de ter como valor um objeto com duas strings, aqui voc\xea pode definir isso sem maiores problemas. A ideia \xe9 criar um tipo repet\xedvel."))}d.isMDXComponent=!0},8209:(e,t,r)=>{r(7294)}}]);